// Generated by CoffeeScript 1.6.1
(function() {
  var chooseRepo, filterIssues, getURLParameter, gethub, milestoneChanged, populateMilestones, populateOrgs, populateRepos, promptRepos, redirectToOauth, session, sortIssues, storage,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  storage = function(key, val) {
    if (val) {
      return localStorage.setItem(key, val);
    } else {
      return localStorage.getItem(key);
    }
  };

  session = function(key, val) {
    if (val) {
      return sessionStorage.setItem(key, val);
    } else {
      return sessionStorage.getItem(key);
    }
  };

  getURLParameter = function(name, params) {
    if (params == null) {
      params = location.search;
    }
    return decodeURIComponent((new RegExp("[?|&]" + name + "=([^&;]+?)(&|##|;|$)").exec(params) || [null, ""])[1].replace(/\+/g, '%20')) || null;
  };

  window.fetchIssues = function(options, params) {
    var org, path, repo;
    org = storage('org');
    repo = storage('repo');
    if (!(org && repo)) {
      promptRepos();
      return;
    }
    path = "/repos/" + org + "/" + repo + "/issues";
    if (storage('milestone')) {
      if (params == null) {
        params = {};
      }
      params.milestone = storage('milestone');
    }
    return gethub(path, params, function(data) {
      var issue, json, labels, _i, _len, _ref;
      json = {
        issues: data.data
      };
      _ref = json.issues;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        issue = _ref[_i];
        if (issue.labels.length > 0) {
          issue.first_label_color = issue.labels[0].color;
        }
      }
      labels = [];
      $('#labels').html('');
      $.each(data.data, function(index, value) {
        if ("Bad credentials" === value) {
          storage("bad_token", true);
          redirectToOauth();
          return;
        }
        console.log(value);
        return $.each(value.labels, function(index, label) {
          var _ref1;
          if (_ref1 = label.name, __indexOf.call(labels, _ref1) < 0) {
            $('#labels').append(ich.label(label));
            return labels.push(label.name);
          }
        });
      });
      return $('#issues-holder').html(ich.issues(json));
    }).then(sortIssues);
  };

  redirectToOauth = function() {
    return document.location.href = "https://github.com/login/oauth/authorize?client_id=d96cd5d6ff897a568d80&scope=repo";
  };

  filterIssues = function() {
    var active_names, filtering_by_label, holder, issues, search_active;
    holder = $('#labels-holder');
    filtering_by_label = holder.hasClass('filtering-by-label');
    search_active = $("#search").val() !== '';
    active_names = [];
    holder.find('li.active').each(function() {
      return active_names.push($(this).data('label-name'));
    });
    issues = $('#issues > li');
    return issues.each(function() {
      var good, issue;
      good = !filtering_by_label;
      issue = $(this);
      $(this).find('li.label').each(function() {
        var _ref;
        if (filtering_by_label && (_ref = $(this).data('label-name'), __indexOf.call(active_names, _ref) >= 0)) {
          return good = true;
        }
      });
      if (search_active && !issue.html().match(new RegExp($('#search').val(), 'i'))) {
        good = false;
      }
      return $(this).toggle(good);
    });
  };

  sortIssues = function(ev) {
    var bottom, issues, top;
    top = $("#top-sort").val();
    bottom = $("#bottom-sort").val();
    issues = $('#issues > li');
    return issues.each(function() {
      var down, issue, up;
      issue = $(this);
      up = false;
      down = false;
      $(this).find('li.label').each(function() {
        if ($(this).data('label-name') === top) {
          up = true;
        }
        if ($(this).data('label-name') === bottom) {
          return down = true;
        }
      });
      if (up) {
        issue.remove();
        return $('#issues').prepend(issue);
      } else if (down) {
        issue.remove();
        return $('#issues').append(issue);
      }
    });
  };

  populateOrgs = function() {
    var buttonText, orglist, repoBtn;
    repoBtn = $('#switch-repo');
    orglist = $('#org');
    if (repoBtn.attr('disabled')) {
      return;
    }
    buttonText = repoBtn.html();
    repoBtn.html('loading...').attr('disabled', 'disabled');
    return gethub('/user/orgs', function(data) {
      var item, _i, _len, _ref;
      repoBtn.html(buttonText);
      orglist.find('.added').remove();
      _ref = data.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        orglist.prepend("<option class='added' value='" + item.login + "'>" + item.login + "</option>");
      }
      repoBtn.hide();
      return orglist.removeClass('hidden').show();
    });
  };

  populateRepos = function(ev, options) {
    var orglist, params, path, val;
    if (options == null) {
      options = {
        page: 1
      };
    }
    orglist = $('#org');
    val = orglist.val();
    if (val === 'owner') {
      path = '/user/repos';
      params = {
        type: 'owner'
      };
    } else if (val === 'member') {
      path = '/user/repos';
      params = {
        type: 'member'
      };
    } else {
      path = "/orgs/" + val + "/repos";
    }
    params = $.extend(options, {
      sort: 'full_name'
    }, params);
    return gethub(path, params, function(data) {
      var contents, item, repolist, _i, _len, _ref;
      repolist = $('#repo');
      repolist.removeClass('hidden').show();
      contents = '';
      console.log("data length: " + data.data.length);
      _ref = data.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        contents = contents + ("<option class='added' value='" + item.full_name + "'>" + item.name + "</option>");
      }
      if (options.page === 1) {
        repolist.find('option.added').remove();
      }
      if (data.data.length === 30) {
        populateRepos(null, {
          page: options.page + 1
        });
      }
      return repolist.append(contents);
    });
  };

  chooseRepo = function() {
    var org, repo, repos, _ref;
    repos = $('#repo');
    _ref = repos.val().split('/'), org = _ref[0], repo = _ref[1];
    storage('org', org);
    storage('repo', repo);
    return populateMilestones();
  };

  populateMilestones = function() {
    var milestones, org, params, path, repo;
    milestones = $('#milestone').show();
    $('#switch-milestone').hide();
    org = storage('org');
    repo = storage('repo');
    path = "/repos/" + org + "/" + repo + "/milestones";
    params = {
      state: 'open'
    };
    return gethub(path, params, function(data) {
      var ele, milestone, _i, _len, _ref;
      milestones.find('option.added').remove();
      _ref = data.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        milestone = _ref[_i];
        ele = $("<option class='added' value=" + milestone.number + ">" + milestone.title + "</option>");
        if (milestone.number === parseInt(storage('milestone'))) {
          ele.attr('selected', 'selected');
        }
        milestones.append(ele);
      }
      return milestones.removeClass('hidden').show();
    });
  };

  milestoneChanged = function() {
    var milestone, number;
    milestone = $('#milestone');
    number = milestone.val();
    if (number === 'none') {
      localStorage.removeItem('milestone');
    } else {
      storage('milestone', number);
    }
    return window.fetchIssues();
  };

  promptRepos = function() {
    var org, repo;
    org = prompt("Type your github organization (ie 'vitrue'):");
    repo = prompt("Type a github repo name within " + org + ":");
    storage('org', org);
    storage('repo', repo);
    return fetchIssues();
  };

  gethub = function(path, params, callback) {
    var purl, url;
    if (!callback) {
      callback = params;
    }
    params = $.extend({
      access_token: storage('token')
    }, params);
    purl = $.param(params);
    url = "https://api.github.com" + path + "?" + purl + "&callback=?";
    return $.getJSON(url, callback);
  };

  $(document).ready(function() {
    var code, search;
    search = $('#search');
    code = getURLParameter("code");
    search.keyup(function(ev) {
      return filterIssues();
    });
    $('#app').on('click', 'li.label', function(ev) {
      var actives, holder, name, removing, selector, target_label;
      ev.stopPropagation();
      name = $(ev.currentTarget).data('label-name');
      if (ev.shiftKey) {
        $('#top-sort').val(name);
        sortIssues();
        return;
      } else if (ev.altKey) {
        $('#bottom-sort').val(name);
        sortIssues();
        return;
      }
      holder = $('#labels-holder');
      selector = "li[data-label-name='" + name + "']";
      target_label = holder.find(selector);
      removing = target_label.is('.active');
      actives = holder.find('li.active');
      if (!(ev.ctrlKey || (actives.length === 1 && removing))) {
        actives.removeClass('active');
      }
      target_label.toggleClass('active');
      holder.toggleClass('filtering-by-label', holder.has('.active').length !== 0);
      return filterIssues();
    });
    $('#clear-labels').click(function() {
      $('#labels-holder').removeClass('filtering-by-label').find('li.active').removeClass('active');
      return filterIssues();
    });
    $('#top-sort, #bottom-sort').keyup(sortIssues);
    $('#switch-repo').click(populateOrgs);
    $('#switch-milestone').click(populateMilestones);
    $('#org').change(populateRepos);
    $('#repo').change(chooseRepo);
    $('#milestone').change(milestoneChanged);
    console.log("HI :)");
    if (storage('bad_token')) {
      localStorage.removeItem("bad_token");
      localStorage.removeItem('token');
    }
    if (storage("token")) {
      return fetchIssues();
    } else if (code) {
      return $.post("/oauth", {
        code: code
      }, function(data) {
        var access_token;
        if (access_token = getURLParameter("access_token", "?" + data)) {
          storage("token", access_token);
          return fetchIssues();
        } else {
          return console.log("Well that didn't work for " + code + "... " + data);
        }
      });
    } else {
      return redirectToOauth();
    }
  });

}).call(this);
